<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.du.mybatis.dao.EmployeeMapper">
    
    <!-- 使用ehcache插件 -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        
    </cache>
    
    <!-- <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
    <!-- 
        eviction:缓存的回收策略：
	        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
	        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
	        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
	        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
	        • 默认的是 LRU。
	    flushInterval：缓存刷新间隔
	                           缓存多长时间清空一次，默认不清空，设置一个毫秒值
	    readOnly:是否只读：
	        true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
	                 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
	        false：非只读：mybatis觉得获取的数据可能会被修改。
	                mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
	    size：缓存存放多少元素；
	    type=""：指定自定义缓存的全类名；
	                                   实现Cache接口即可；
     -->


	<!-- 
	namespace:名称空间;指定为接口的全类名
	id：唯一标识
	resultType：返回值类型
	#{id}：从传递过来的参数中取出id值
	
	public Employee getEmpById(Integer id);
	 -->
	<select id="getEmpById" resultType="com.du.mybatis.bean.Employee" databaseId="mysql">
		select id,last_name lastName,email,gender from tbl_employee where id = #{id}
	</select>
	
    <!-- public void addEmp(Employee employee) -->
    <!-- parameterType可以省略 -->
    <!-- 
        mysql支持自增主键， 
                        设置useGeneratedKeys为true即可，
        keyProperty:主键属性                
                        注意返回的值在Employeed对象中，getId()可获取
    -->
    <insert id="addEmp" useGeneratedKeys="true" keyProperty="id" parameterType="com.du.mybatis.bean.Employee" databaseId="mysql">
        insert into tbl_employee (last_name, email, gender)
        values(#{lastName},#{email},#{gender})
    </insert>
    <!-- 
        Oracle数据库配置：oracle使用的序列自增的                
    -->
    <insert id="addEmp" parameterType="com.du.mybatis.bean.Employee" databaseId="oracle">
        <!-- 
            keyProperty:查询后的主键封装给哪个字段
            order="BEFORE":当前sql在插入之前运行
            resultType="Integer":主键返回值类型
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的SQL -->
            select EMPLOYEE_SEQ.nextval from dual
        </selectKey>
        insert into tbl_employee (last_name, email, gender)
        values(#{lastName},#{email},#{gender})
    </insert>
    
    	
    <!-- public void updateEmp(Employee employee) -->
    <update id="updateEmp">
        update tbl_employee set last_name=#{lastName}, email=#{email}, gender=#{gender}
        where id = #{id}
    </update>
    
    <!-- public void deleteEmpById(Integer id) -->
    <delete id="deleteEmpById">
        delete from tbl_employee where id=#{id}
    </delete>
    
    <!-- public Employee getEmpByIdAndLastName(Integer id, String lastName); -->
    
    <select id="getEmpByIdAndLastName" resultType="com.du.mybatis.bean.Employee">
        select id,last_name lastName,email,gender from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    
    <!-- public Employee getEmpByEmp(Employee employee); -->
    <select id="getEmpByEmp" resultType="com.du.mybatis.bean.Employee">
        select id,last_name lastName,email,gender from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    
    <!-- public Employee getEmpByMap(Map<String, Object> paraMap); -->
    <select id="getEmpByMap" resultType="com.du.mybatis.bean.Employee">
        select id,last_name lastName,email,gender from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    
    <!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
    <select id="getEmpsByLastNameLike" resultType="com.du.mybatis.bean.Employee">
        select id,last_name lastName,email,gender from tbl_employee where last_name like #{lastName}
    </select>
    
    <!-- public Map<String, Object> getEmpByIdReturnMap(Integer id); -->
    <select id="getEmpByIdReturnMap" resultType="map">
        select id,last_name lastName,email,gender from tbl_employee where id= #{id}
    </select>
    
    <!-- public Map<Integer, Employee> getEmpsByLastNameReturnMap(String lastName); -->
    <select id="getEmpsByLastNameReturnMap" resultType="com.du.mybatis.bean.Employee">
        select id,last_name lastName,email,gender from tbl_employee where last_name like #{lastName}
    </select>

</mapper>